import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from prophet import Prophet
from prophet.make_holidays import make_holidays_df
from datetime import timedelta
import altair as alt

# ‚îÄ‚îÄ coin_top_n ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if "coin_top_n" not in st.session_state:
    st.session_state.coin_top_n = 10

# ‚îÄ‚îÄ ÌïúÍµ≠ Í≥µÌú¥Ïùº (Prophet ÏòàÏ∏°Ïóê ÏÇ¨Ïö©) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
holidays_kr = make_holidays_df(year_list=[2024, 2025], country="KR")

# ‚îÄ‚îÄ RDS Ïó∞Í≤∞ Ï†ïÎ≥¥ (secrets.toml) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user     = st.secrets["DB"]["DB_USER"]
password = st.secrets["DB"]["DB_PASSWORD"]
host     = st.secrets["DB"]["DB_HOST"]
port     = st.secrets["DB"]["DB_PORT"]
db       = st.secrets["DB"]["DB_NAME"]

engine = create_engine(
    f"mysql+pymysql://{user}:{password}@{host}:{port}/{db}?charset=utf8mb4",
    pool_recycle=3600,
    connect_args={"connect_timeout": 10}
)

# ‚îÄ‚îÄ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_data
def load_coin_data():
    # purchase_log_bomkr ÌÖåÏù¥Î∏îÏóêÏÑú g_coin, b_coin, g_coin_cncl, b_coin_cncl ÏùÑ Î∂àÎü¨ÏôÄ
    # ÌÜ†ÌÉàÏΩîÏù∏(total_coin)ÏùÑ Í≥ÑÏÇ∞
    sql = """
      SELECT
        date,
        Title,
        (g_coin - g_coin_cncl) + (b_coin - b_coin_cncl) AS total_coin
      FROM purchase_log_bomkr
    """
    df = pd.read_sql(sql, con=engine)
    # ÎÇ†Ïßú ÌååÏã±
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    # total_coin Ï†ïÏàòÎ°ú
    df["total_coin"] = pd.to_numeric(df["total_coin"], errors="coerce").fillna(0).astype(int)
    return df

# ‚îÄ‚îÄ ÌéòÏù¥ÏßÄ ÏÉÅÎã® ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.header("ü™ô ÏΩîÏù∏ Îß§Ï∂ú Î∂ÑÏÑù")
coin_date_range = st.date_input("ÏΩîÏù∏ Î∂ÑÏÑù Í∏∞Í∞Ñ ÏÑ§Ï†ï", [], key="coin_date")

if len(coin_date_range) == 2:
    s, e = map(pd.to_datetime, coin_date_range)
    coin_df = load_coin_data()
    # Í∏∞Í∞Ñ ÌïÑÌÑ∞ÎßÅ
    df_p = coin_df[(coin_df["date"] >= s) & (coin_df["date"] <= e)]

    # Ï†ÑÏ≤¥ ÏÇ¨Ïö© ÏΩîÏù∏
    total_coins = int(df_p["total_coin"].sum())

    # ÏûëÌíàÎ≥Ñ Ìï©ÏÇ∞ & ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨
    coin_sum = (
        df_p
        .groupby("Title")["total_coin"]
        .sum()
        .sort_values(ascending=False)
    )

    # Top N
    top_n      = st.session_state.coin_top_n
    top_n_sum  = int(coin_sum.head(top_n).sum())
    ratio      = top_n_sum / total_coins if total_coins else 0

    # Ìó§ÎçîÏóê Ìï©Í≥Ñ/ÎπÑÏú® ÌëúÏãú
    st.subheader(
        f"üìã Top {top_n} ÏûëÌíà: "
        f"{top_n_sum:,} / {total_coins:,} ({ratio:.1%})"
    )

    # ÌÖåÏù¥Î∏î Ï§ÄÎπÑ
    first_launch = coin_df.groupby("Title")["date"].min()
    top_df = coin_sum.head(top_n).reset_index(name="Total_coins")
    top_df.insert(0, "Rank", range(1, len(top_df) + 1))
    top_df["Launch Date"] = top_df["Title"].map(first_launch).dt.strftime("%Y-%m-%d")
    top_df["is_new"]      = pd.to_datetime(top_df["Launch Date"]) >= s

    # ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìï®Ïàò
    def hl(row):
        is_new = top_df.loc[row.name, "is_new"]
        return ["color: yellow" if (col=="Title" and is_new) else "" for col in row.index]

    disp = top_df[["Rank","Title","Total_coins","Launch Date"]].copy()
    styled = (
        disp.style
            .apply(hl, axis=1)
            .format({"Total_coins":"{:,}"})
            .set_table_styles([
                {"selector":"th", "props":[("text-align","center")]},
                {"selector":"td", "props":[("text-align","center")]},
                {"selector":"th.row_heading, th.blank","props":[("display","none")]}
            ])
    )
    st.markdown(styled.to_html(index=False, escape=False), unsafe_allow_html=True)

    # ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº
    if len(coin_sum) > top_n:
        if st.button("ÎçîÎ≥¥Í∏∞", key="btn_coin_more"):
            st.session_state.coin_top_n += 10
